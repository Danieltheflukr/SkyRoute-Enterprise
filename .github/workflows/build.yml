# Workflow 名稱，說明包含建置映像檔和部署 Worker
name: SkyRoute-Enterprise - Build Image (GHCR) & Deploy Worker 🚀

on:
  push:
    branches:
      - "main" # 只在 main 分支被推送時觸發
  pull_request:
    branches:
      - main

# 設定 workflow 需要的權限
permissions:
  contents: read   # actions/checkout 需要讀取權限
  packages: write  # docker/login-action (使用 GITHUB_TOKEN 登入 GHCR) 需要寫入權限

jobs:
  # --- 第一個 Job：建置並推送 Docker 映像檔 ---
  docker:
    name: Build & Push Docker Image to GHCR
    runs-on: ubuntu-latest

    steps:
      # 步驟 1：取得原始碼
      - name: Checkout source code
        uses: actions/checkout@v4

      # 步驟 2：設定 QEMU (為了跨平台建置)
      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      # 步驟 3：設定 Docker Buildx (啟用進階建置功能)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步驟 4：登入 GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # 使用自動產生的 GITHUB_TOKEN

      # 步驟 5：產生 Docker Tag
      - name: Generate safe version tag
        id: docker_tag_generator
        run: |
         #Try to extract the version from Dockerfile; fallback to default if empty
         VERSION=$(grep -oP '(?<=ARG CLOUDFLARED_VERSION=).*' Dockerfile | tr -d '\n' || echo "2025.4.0")
         if [ -z "$VERSION" ]; then VERSION="2025.4.0"; fi
         DATE_TAG=$(date +'%Y%m%d')
         COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
         # Ensure the final tag is valid and lowercase
         FINAL_TAG=$(echo "${VERSION}-${DATE_TAG}-${COMMIT_SHA}" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
         echo "DOCKER_TAG=${FINAL_TAG}" >> $GITHUB_ENV
         echo "🔥 Docker tag generated: ${FINAL_TAG}"- name: Generate safe version tag
        
      # 步驟 6：建置並推送到 GHCR (包含快取)
      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        env:
          # 從環境變數讀取生成的 Docker 標籤
          DOCKER_TAG: ${{ env.DOCKER_TAG }}
        with:
          context: .
          platforms: linux/amd64,linux/arm64 # <--- 簡化了平台，如有需要可加回 armhf
          push: ${{ github.event_name == 'push' }} # 只有在 push 到 main 分支時才推送
          tags: | # 使用多行字串列出標籤
            ghcr.io/danieltheflukr/skyroute-enterprise:${{ env.DOCKER_TAG }}
            ghcr.io/danieltheflukr/skyroute-enterprise:latest
          # --- 使用 GitHub Actions Cache 加速 Docker 建置 ---
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # --- 快取設定結束 ---

      # 步驟 7：通知 Docker 建置成功
      - name: Notify Docker build status
        if: always() # 無論成功或失敗都執行
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ SkyRoute-Enterprise image (Tag: ${{ env.DOCKER_TAG }}) pushed to GHCR successfully!"
          else
            echo "❌ SkyRoute-Enterprise image build/push failed."
          fi

  # --- 第二個 Job：測試並部署 Cloudflare Worker ---
  worker:
    name: Test & Deploy Cloudflare Worker # <--- 修改了 Job 名稱
    runs-on: ubuntu-latest
    needs: docker # <--- 這個 job 會在 'docker' job 成功完成後才開始

    steps:
      # 步驟 1：取得原始碼 (Worker 部署和測試都需要原始碼)
      - name: Checkout source code
        uses: actions/checkout@v4

      # 步驟 2：設定 Node.js 環境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18 # <--- 建議使用 LTS 版本，或根據你的需求調整
          cache: 'npm' # <--- 為 npm install 加入快取
          # cache-dependency-path: path/to/your/worker/package-lock.json # 如果 package-lock.json 不在根目錄

      # 步驟 3：安裝依賴 (包含 wrangler CLI 和測試框架)
      - name: Install dependencies # <--- 新增步驟
        run: npm install

      # 步驟 4：執行測試 # <--- 新增步驟
      - name: Run backend tests
        working-directory: app/backend
        run: npm test

      # 步驟 5：部署 Worker 到 Cloudflare (只有在前面的步驟都成功時才會執行)
      - name: Publish to Cloudflare Worker
        # 只在 push 到 main 分支且測試通過後才部署
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          # --- 確保這些 Secrets 已經在 GitHub Repo Settings > Secrets and variables > Actions 中建立 ---
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          # --- 如果 wrangler.toml 需要帳號 ID 且沒有硬編碼，也需要設定 ---
          # CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        # 使用 npx 執行專案中安裝的 wrangler，避免全局安裝的版本衝突
        run: npx wrangler deploy

      # 步驟 6：通知 Worker 部署狀態
      - name: Notify Worker deploy status
        if: always() # 無論成功或失敗都執行
        run: |
          # 檢查部署步驟是否被跳過 (例如因為不是 push 到 main 或測試失敗)
          if [ "${{ steps.publish.outcome }}" == "skipped" ]; then
            echo "ℹ️ Cloudflare Worker deployment skipped (not a push to main or previous steps failed)."
          elif [ "${{ job.status }}" == "success" ]; then
            echo "✅ SkyRoute-Enterprise Cloudflare Worker deployed successfully!"
          else
            # 涵蓋了 npm install, npm test, 或 wrangler deploy 失敗的情況
            echo "❌ SkyRoute-Enterprise Cloudflare Worker test or deploy failed!"
          fi

  # --- build-and-deploy Job 已被移除 ---
